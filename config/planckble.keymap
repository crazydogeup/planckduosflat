/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <4 5>;
            layers = <0>;
        };
    };

    macros {
        macro0: macro0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N2 &kp N1 &kp N2 &kp N1 &kp N2 &kp N3>;
            label = "MACRO0";
        };
    };

    behaviors {
        auto_shift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC     &kp Q         &kp W         &kp E  &kp R        &kp T        &kp Y      &kp U  &kp I                        &kp O                    &kp P                      &kp BSPC
&kp TAB     &kp A         &kp S         &kp D  &kp F        &kp G        &kp H      &kp J  &kp K                        &kp L                    &auto_shift LS(SEMI) SEMI  &kp ENTER
&kp LSHIFT  &kp Z         &kp X         &kp C  &kp V        &kp B        &kp N      &kp M  &auto_shift LS(COMMA) COMMA  &auto_shift LS(DOT) DOT  &auto_shift LS(FSLH) FSLH  &kp RIGHT_SHIFT
&kp LCTRL   &kp LEFT_WIN  &kp LEFT_ALT  &mo 2  &lt 1 SPACE  &lt 1 SPACE  &kp SPACE  &mo 3  &kp LEFT                     &kp DOWN                 &kp UP_ARROW               &kp RIGHT
            >;
        };

        lower_layer {
            bindings = <
&auto_shift LS(GRAVE) GRAVE  &auto_shift LS(N1) N1  &auto_shift LS(N2) N2  &auto_shift LS(N3) N3  &auto_shift LS(N4) N4  &auto_shift LS(N5) N5  &auto_shift LS(N6) N6  &auto_shift LS(N7) N7  &auto_shift LS(N8) N8  &auto_shift LS(N9) N9  &auto_shift LS(N0) N0        &auto_shift BSLH LS(BSLH)
&kp CAPS                     &trans                 &trans                 &trans                 &trans                 &kp ENTER              &kp LEFT               &kp DOWN               &kp UP_ARROW           &kp RIGHT              &auto_shift LS(MINUS) MINUS  &auto_shift LS(EQUAL) EQUAL
&trans                       &trans                 &trans                 &trans                 &trans                 &trans                 &trans                 &kp C_MUTE             &kp C_VOL_DN           &kp C_VOL_UP           &trans                       &kp DELETE
&trans                       &trans                 &trans                 &trans                 &tog 1                 &tog 1                 &kp N0                 &kp N0                 &trans                 &trans                 &trans                       &trans
            >;
        };

        raise_layer {
            bindings = <
&auto_shift LS(GRAVE) GRAVE  &kp F1  &kp F2  &kp F3  &kp LA(F4)  &kp F5  &kp F6  &kp F8  &kp F9  &kp F10  &kp F11                    &kp F12
&kp CLCK                     &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans   &auto_shift LS(LBKT) LBKT  &auto_shift LS(RBKT) RBKT
&trans                       &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans   &trans                     &trans
&trans                       &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans   &trans                     &trans
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans  &trans  &trans  &trans  &trans        &kp PRINTSCREEN            &trans
&kp K_POWER  &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans        &auto_shift LS(LBKT) LBKT  &auto_shift LS(RIGHT_BRACKET) RIGHT_BRACKET
&trans       &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1               &bt BT_SEL 2
&trans       &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 3  &bt BT_SEL 4               &bt BT_CLR
            >;
        };
    };
};
